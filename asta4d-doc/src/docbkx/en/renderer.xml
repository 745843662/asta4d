<?xml version="1.0" encoding="UTF-8"?>
<chapter xml:id="renderer"
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xl="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd">
  <title>Renderer: easy to use, secure, testable</title>
  
  <para>
  In Asta4D, all the rendering logic is declared by a Renderer class which provide various interface for rendering.
  </para>
  
  <section>
    <title>How to render data to page</title>
    <itemizedlist>
      <listitem>
        <para>Renderer accepts various types as rendering value</para>
        <example><title>Sample usage of Renderer</title>
        <programlisting language="java">
<![CDATA[
Renderer render = new GoThroughRenderer();  
render.add("#someIdForInt", 12345);  
render.add("#someIdForLong", 12345L);  
render.add("#someIdForBool", true);  
render.add("#someIdForStr", "a str");  
render.add("#someIdForNull", (Object) null);  
render.add("#someIdForClear", Clear);  
  
Element newChild = ElementUtil.parseAsSingle("<div></div>");  
render.add("#someIdForElementSetter", new ChildReplacer(newChild));  
  
render.add("#someIdForElement", ElementUtil.parseAsSingle("<div>eee</div>"));  
  
render.add("#someIdForRenderer", Renderer.create("#value", "value"));  
]]>
        </programlisting>
        </example>
      </listitem>
    
      <listitem>
        <para>List of data can be rendered via Renderer too:</para>
        <example><title>Sample of list rendering</title>
        <programlisting language="java">
<![CDATA[
Renderer render = new GoThroughRenderer();  
render.add("#someIdForInt", Arrays.asList(123, 456, 789));  
render.add("#someIdForLong", Arrays.asList(123L, 456L, 789L));  
render.add("#someIdForBool", Arrays.asList(true, true, false));  
render.add("#someIdForStr", Arrays.asList("str1", "str2", "str3"));  
  
Element newChild1 = ElementUtil.parseAsSingle("<div>1</div>");  
Element newChild2 = ElementUtil.parseAsSingle("<div>2</div>");  
  
render.add("#someIdForElementSetter", Arrays.asList(new ChildReplacer(newChild1), new ChildReplacer(newChild2)));  
  
render.add("#someIdForElement", Arrays.asList(newChild1, newChild2));  
  
render.add("#someIdForRenderer", Arrays.asList(123, 456, 789), new RowRenderer<Integer>() {  
    @Override  
    public Renderer convert(int rowIndex, Integer obj) {  
        return Renderer.create("#id", "id-" + obj).add("#otherId", "otherId-" + obj);  
    }  
});   
]]>
        </programlisting>
        </example>
      </listitem>
    
      <listitem>
        <para>DOM attribution can be done too:</para>
        <example><title>Sample of DOM attribution rendering</title>
        <programlisting language="java">
<![CDATA[
render.add("#id", "+class", "yyy");  
render.add("#id", "-class", "zzz");  
  
render.add("#id", "+class", "xxx");  
  
render.add("#id", "value", "hg");  
render.add("#id", "href", null);  
  
render.add("#X", "value", new Date(123456L));
]]>
        </programlisting>
        </example>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Immune from cross-site hole</title>
    <para>
    The previous samples show us that all the operations to DOM are delegated by Renderer except create DOM
    from String value by "ElementUtil#parseAsSingle". As a matter of fact, all the delegated operations cause
    all the rendering values are escaped by force, which means that your system is, by nature, immune from
    cross-site problems if there is no "ElementUtil#parseAsSingle" calling in your system. You do not need
    to be wary of illegal characters by from the clients since all the values will be escaped as HTML compulsorily.
    </para>
    
    On the other hand, according to our practice, it is rarely that you have to call “ElementUtil.parseAsSingle”
    to generate the rendering content from a raw HTML string, so just take care of your usage of this exceptional api
    then you can say bye-bye to the cross-site holes.    
  </section>
  
  <section>
    <title>Test your rendering logic</title>
    <para>
    Testing web page is always a complex task and we usually verify rendering results by selenuim which is as a common
    technology. By Asta4D, testable Renderer can replace over than half of selenium tests to simpler junit tests.
    </para>
    
    <para>
    According to the previous samples, all the rendering logic is holded by an instance of Renderer class, so simply,
    we can verify almost rendering logic by testing the returned Renderer instance from the snippet method. 
    </para>
    
    <example><title>Sample RendererTester</title>
    <programlisting language="java">
<![CDATA[
RendererTester tester = RendererTester.forRenderer(render);  
Assert.assertEquals(tester.get("#someIdForInt"), 12345);  
Assert.assertEquals(tester.get("#someIdForLong"), 12345L);  
Assert.assertEquals(tester.get("#someIdForBool"), true);  
Assert.assertEquals(tester.get("#someIdForStr"), "a str");  
Assert.assertEquals(tester.get("#someIdForNull"), null);  
Assert.assertEquals(tester.get("#someIdForClear"), Clear);  
]]>
    </programlisting>
    </example>
    
    <para>More samples can be found in <ulink url="https://github.com/astamuse/asta4d/blob/develop/asta4d-core/src/test/java/com/astamuse/asta4d/test/unit/RenderTesterTest.java">source</ulink></para>
  </section>
  
</chapter>